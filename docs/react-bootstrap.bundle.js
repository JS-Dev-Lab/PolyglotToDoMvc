(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{46:function(e,t,n){"use strict";n.r(t);var r=n(64),o=n(61),a=n.n(o);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var m=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=s(this,f(t).call(this,e))).state=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e.state,{editValue:""}),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this,t=this.state,n=t.todos,r=t.filter,o=t.editValue,c=this.props.commands,l=n.filter((function(e){return e.completed})),i=n.filter((function(e){return!e.completed})),u="all"===r?n:"active"===r?i:l;return a.a.createElement("section",{className:"todoapp"},a.a.createElement("header",{className:"header"},a.a.createElement("form",{onSubmit:function(e){c.addTodo(e.target.todo.value),e.preventDefault(),e.target.todo.value=""}},a.a.createElement("h1",null,"todos"),a.a.createElement("input",{placeholder:"What needs to be done?",name:"todo",className:"new-todo"}))),a.a.createElement("section",{className:"main"},a.a.createElement("input",{id:"toggle-all",checked:0===i.length,type:"checkbox",className:"toggle-all",onChange:function(e){return c.updateToDos(e.target.checked)}}),a.a.createElement("label",{htmlFor:"toggle-all"},"Mark all as complete"),a.a.createElement("ul",{className:"todo-list"},u.map((function(t){return a.a.createElement("li",{key:t.id,className:"todo ".concat(t.completed?" completed":""," ").concat(t.editing?" editing":"")},a.a.createElement("div",{className:"view"},a.a.createElement("input",{type:"checkbox",className:"toggle",checked:t.completed,onChange:function(e){return c.updateToDo(t,e.target.checked)}}),a.a.createElement("label",{onDoubleClick:function(){e.setState({editValue:t.title}),c.edit(t)}},t.title),a.a.createElement("button",{className:"destroy",onClick:function(){return c.removeTodo(t)}})),a.a.createElement("form",{onSubmit:function(e){c.updateToDoTitle(t,o),e.preventDefault()},onBlur:function(){return c.cancelEdit(t)}},a.a.createElement("input",{name:"title",type:"text",className:"edit",onBlur:function(){return c.cancelEdit(t)},value:o,onChange:function(t){e.setState({editValue:t.target.value})}})))})))),0!==n.length&&a.a.createElement("footer",{className:"footer"},a.a.createElement("span",{className:"todo-count"},a.a.createElement("strong",null,i.length)," item(s) left"),a.a.createElement("ul",{className:"filters"},["all","active","completed"].map((function(e){return a.a.createElement("li",{key:e},a.a.createElement("a",{className:"filter ".concat(e===r?"selected":""),href:"#/".concat(e)},e))}))),0!==l.length&&a.a.createElement("button",{className:"clear-completed",onClick:function(){return c.removeCompleted()}},"Clear completed")))}}])&&u(n.prototype,r),o&&u(n,o),t}(o.Component);n(51),n(53),n(55);n.d(t,"createView",(function(){return b}));var d=document.getElementById("app"),b=Object(r.viewCreatorFactory)(m,d)},55:function(e,t,n){var r=n(56);"string"==typeof r&&(r=[[e.i,r,""]]),r.locals&&(e.exports=r.locals);(0,n(50).default)("54fa02ba",r,!1,{})},56:function(e,t,n){(e.exports=n(49)(!1)).push([e.i,".todoapp h1 {\r\n    position: absolute;\r\n    top: -155px;\r\n    width: 100%;\r\n    font-size: 100px;\r\n    font-weight: 100;\r\n    text-align: center;\r\n    color: rgba(175, 47, 47, 0.15);\r\n    -webkit-text-rendering: optimizeLegibility;\r\n    -moz-text-rendering: optimizeLegibility;\r\n    text-rendering: optimizeLegibility;\r\n  }\r\n  \r\n  .filters .filter {\r\n    text-transform: capitalize;\r\n  }",""])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,